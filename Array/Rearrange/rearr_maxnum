#include <iostream>
#include <algorithm>

using namespace std;

bool wayToSort(int i, int j) {return i>j;}

void rearr_max(int arr[], int n){
    
    sort(arr, arr+n, wayToSort);
    
    for(int i=0;i<n;i++){
        cout << arr[i];
    }
    
}

int main() {
    int arr[] = { 10,20,30,40,50 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    rearr_max(arr, n);

    return 0;
}

////// other solution

#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
 
// A comparison function which
// is used by sort() in
// printLargest()
int myCompare(string X, string Y)
{
    // first append Y at the end of X
    string XY = X.append(Y);
 
    // then append X at the end of Y
    string YX = Y.append(X);
 
    // Now see which of the two
    // formed numbers is greater
    return XY.compare(YX) > 0 ? 1 : 0;
}
 
// The main function that prints
// the arrangement with the
// largest value. The function
// accepts a vector of strings
void printLargest(vector<string> arr)
{
     
    // Sort the numbers using
    // library sort function. The
    // function uses our comparison
    // function myCompare() to
    // compare two strings. See
    // http://www.cplusplus.com/reference/
    // algorithm/sort/
    // for details
    sort(arr.begin(), arr.end(), myCompare);
 
    for (int i = 0; i < arr.size(); i++)
        cout << arr[i];
}
 
// Driver code
int main()
{
    vector<string> arr;
 
    // output should be 6054854654
    arr.push_back("54");
    arr.push_back("546");
    arr.push_back("548");
    arr.push_back("60");
    printLargest(arr);
 
    return 0;
}

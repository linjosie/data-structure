#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;

void Rearr(int arr[], int n){
    sort(arr, arr+n);
    
    int temp[n] = {};
    
    //for(int i=0;i<n;i++) cout << arr[i] << endl;
    int a = -1;
    int base;
    if( n%2 != 0) base = n/2;
    else base = n/2-1;
    for(int i=0;i<n;i++){
        //cout << "base:" << base << endl;
        //cout << "arr point " << base<< endl;
        base-=i*(int)pow(a,i);
        temp[i] = arr[base];
        //cout << "new base " << base << endl;
        //cout << endl;
    }
    //cout << endl;
    for(int i=0;i<n;i++) cout << temp[i];
}

int main(){

    int arr[] = {1, 2, 1, 4, 5, 6, 8, 8};
    int n = sizeof(arr)/sizeof(arr[0]);
    
    Rearr(arr, n);

    
}




///// other soultion

#include <bits/stdc++.h>
using namespace std;
  
// function to rearrange the array
void rearrangeArr(int arr[], int n)
{
    // total even positions
    int evenPos = n / 2;
  
    // total odd positions
    int oddPos = n - evenPos;
  
    int tempArr[n];
  
    // copy original array in an
    // auxiliary array
    for (int i = 0; i < n; i++)
        tempArr[i] = arr[i];
  
    // sort the auxiliary array
    sort(tempArr, tempArr + n);
  
    int j = oddPos - 1;
  
    // fill up odd position in original
    // array
    for (int i = 0; i < n; i += 2) {
        arr[i] = tempArr[j];
        j--;
    }
  
    j = oddPos;
  
    // fill up even positions in original
    // array
    for (int i = 1; i < n; i += 2) {
        arr[i] = tempArr[j];
        j++;
    }
  
    // display array
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
}
  
// Driver code
int main()
{
    int arr[] = { 1, 2, 3, 4, 5, 6, 7 };
    int size = sizeof(arr) / sizeof(arr[0]);
    rearrangeArr(arr, size);
    return 0;
}

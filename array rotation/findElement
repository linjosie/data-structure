#include <iostream>

using namespace std;

int findSmallrotate(int arr[], int n, int rotate[2][2], int find){
    /*for (int i=0;i<n;i++){
        cout << arr[i]<<" ";
    }
    cout << endl;*/
    for(int i=0;i<2;i++){
        int x = rotate[i][0];
        int y = rotate[i][1];
        
        //cout << x << y ;
        
        int temp = arr[y];
        for(int i=y;i>=x;i--){
            arr[i]=arr[i-1];
            //cout << arr[i];
        }
        arr[x] = temp;
        
       // cout <<" n size" << n ;
       
       for(int i=0;i<n;i++){
            cout << arr[i];
        }
        cout << endl;
        
        
    }
    
    for(int i=0;i<n;i++){
            if(arr[i] == find) return i;
    }
}




int main() {
    int arr[] = {1, 2, 3, 4, 5 };
    int n = sizeof(arr)/sizeof(arr[0]);
    int rotate[2][2]= { {0, 2}, {0, 3} };
    int find = 3;
    
    cout << findSmallrotate(arr, n, rotate, find);
    
    return 0;
}



////other solution


#include <bits/stdc++.h> 
using namespace std; 
  
// Function to compute the element at 
// given index 
int findElement(int arr[], int ranges[][2], 
               int rotations, int index) 
{ 
    for (int i = rotations - 1; i >= 0; i--) { 
  
        // Range[left...right] 
        int left = ranges[i][0]; 
        int right = ranges[i][1]; 
  
        // Rotation will not have any effect 
        if (left <= index && right >= index) { 
            if (index == left) 
                index = right; 
            else
                index--; 
        } 
    } 
  
    // Returning new element 
    return arr[index]; 
} 
  
// Driver 
int main() 
{ 
    int arr[] = { 1, 2, 3, 4, 5 }; 
  
    // No. of rotations 
    int rotations = 2; 
  
    // Ranges according to 0-based indexing 
    int ranges[rotations][2] = { { 0, 2 }, { 0, 3 } }; 
  
    int index = 1; 
  
    cout << findElement(arr, ranges, rotations, index); 
  
    return 0; 
  
} 

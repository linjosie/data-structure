#include <iostream>

using namespace std;

void Reverse(int arr[], int start, int end){
    while(start<end){
        swap(arr[start], arr[end]);
        start++;
        end--;
    }
}

void queryType2(int arr[], int n, int d){
    int a = n-d;
    Reverse(arr, 0, n-1);
    Reverse(arr, 0, a-1);
    Reverse(arr, a, n-1);
    for(int i=0;i<n;i++){
        cout << arr[i]<< " ";
    }
}

void queryType1(int arr[], int n, int d){
    Reverse(arr, 0, n-1);
    Reverse(arr, 0, d-1);
    Reverse(arr, d, n-1);
    for(int i=0;i<n;i++){
        cout << arr[i]<< " ";
    }
}

int queryType3(int arr[], int n, int start, int end){
    int sum = 0;
    for(int i=start; i<end+1; i++){
        sum +=arr[i];
    }
    return sum;
}


void wrapper(int arr[], int n){
    queryType1(arr, n, 3);
    cout << queryType3(arr, n, 0, 2) << endl;
    queryType2(arr, n, 1);
    cout << queryType3(arr, n, 1, 4) << endl;
}

int main() 
{ 
    int arr[] = {1, 2, 3, 4, 5}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    wrapper(arr, n);
    return 0; 
}



/////// other soultion


// Function to solve query of type 1 x. 
void querytype1(int* toRotate, int times, int n) 
{ 
    // Decreasing the absolute rotation 
    (*toRotate) = ((*toRotate) - times) % n; 
} 
  
// Function to solve query of type 2 y. 
void querytype2(int* toRotate, int times, int n) 
{ 
    // Increasing the absolute rotation. 
    (*toRotate) = ((*toRotate) + times) % n; 
} 
  
// Function to solve queries of type 3 l r. 
void querytype3(int toRotate, int l, int r,  
                      int preSum[], int n) 
{ 
    // Finding absolute l and r. 
    l = (l + toRotate + n) % n; 
    r = (r + toRotate + n) % n; 
  
    // if l is before r. 
    if (l <= r)  
        cout << (preSum[r + 1] - preSum[l]) << endl;     
  
    // If r is before l. 
    else 
        cout << (preSum[n] + preSum[r + 1] - preSum[l]) 
             << endl;     
} 
  
// Wrapper Function solve all queries. 
void wrapper(int a[], int n) 
{ 
    int preSum[n + 1]; 
    preSum[0] = 0; 
  
    // Finding Prefix sum 
    for (int i = 1; i <= n; i++) 
        preSum[i] = preSum[i - 1] + a[i - 1]; 
  
    int toRotate = 0; 
  
    // Solving each query 
    querytype1(&toRotate, 3, n); 
    querytype3(toRotate, 0, 2, preSum, n); 
    querytype2(&toRotate, 1, n); 
    querytype3(toRotate, 1, 4, preSum, n); 
} 
  
// Driver Program 
int main() 
{ 
    int a[] = { 1, 2, 3, 4, 5 }; 
    int n = sizeof(a) / sizeof(a[0]); 
    wrapper(a, n); 
    return 0; 
} 
